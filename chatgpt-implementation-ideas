Here’s a single, hand-off **implementation spec** for a Nextra (Docs theme) site with **left sidebar navigation** and **right-side in-page TOC**, plus **Pagefind** client-side search. Deploy as a static export (e.g., Vercel). All content is Markdown/MDX.

---

# Implementation Spec — “Claude Code for PMs” (Nextra + Pagefind)

## Goals

* Docs site using **Nextra (Docs theme)**.
* **Left sidebar** (folder-driven via `_meta.json`) and **right-side in-page TOC** (auto from headings).
* **Client-side search** via **Pagefind** (static index in `/out/pagefind`).
* Content in `.md`/`.mdx`, incrementally adopt MDX components.

## Tech

* Next.js 14 + `nextra` + `nextra-theme-docs`
* Static export (`output: "export"`) for Pagefind compatibility
* Pagefind UI served from `/pagefind/*`

## File Tree (create exactly)

```
ccpm-site/
  package.json
  next.config.mjs
  tsconfig.json
  theme.config.tsx
  public/
    favicon.ico
  pages/
    _meta.json
    index.mdx
    search.mdx
    00-intro/
      _meta.json
      overview.mdx
    01-getting-started/
      _meta.json
      install-claude-code.mdx
    99-reference/
      _meta.json
      commands.mdx
```

## File Contents

### `package.json`

```json
{
  "name": "ccpm-site",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build && next export",
    "postbuild": "pagefind --site ./out",
    "preview": "npx serve out -p 3000"
  },
  "dependencies": {
    "next": "14.2.5",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "nextra": "3.2.3",
    "nextra-theme-docs": "3.2.3",
    "pagefind": "1.1.0"
  }
}
```

### `next.config.mjs`

```js
import withNextra from 'nextra'({
  theme: 'nextra-theme-docs',
  themeConfig: './theme.config.tsx'
})

/** @type {import('next').NextConfig} */
const config = {
  output: 'export',        // static export for Pagefind
  images: { unoptimized: true }
}

export default withNextra(config)
```

### `tsconfig.json`

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "es2020"],
    "jsx": "preserve",
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "strict": true,
    "allowJs": true,
    "baseUrl": "."
  }
}
```

### `theme.config.tsx`

```tsx
import React from 'react'

export default {
  logo: <span>Claude Code for PMs</span>,
  project: { link: 'https://github.com/your-org/your-repo' },
  docsRepositoryBase: 'https://github.com/your-org/your-repo/blob/main',
  footer: { text: '© Carl — Full Stack PM' },
  useNextSeoProps() {
    return { titleTemplate: '%s – Claude Code for PMs' }
  }
}
```

### Sidebar structure (`pages/_meta.json`)

```json
{
  "index": "Welcome",
  "00-intro": "Introduction",
  "01-getting-started": "Getting Started",
  "99-reference": "Reference",
  "search": { "title": "Search", "type": "page" }
}
```

#### `pages/00-intro/_meta.json`

```json
{ "overview": "Overview" }
```

#### `pages/01-getting-started/_meta.json`

```json
{ "install-claude-code": "Install Claude Code" }
```

#### `pages/99-reference/_meta.json`

```json
{ "commands": "Commands" }
```

### Pages

#### `pages/index.mdx`

```mdx
---
title: Claude Code for PMs
description: A practical reference for using Claude Code on real product work.
toc: true
sidebar: true
---

# Claude Code for Product Managers

Use the **sidebar** to browse modules. The **right-side TOC** follows your position on each page.

## What’s inside
- **Introduction** — mental model and setup
- **Getting Started** — quick install + first run
- **Reference** — commands, shortcuts, troubleshooting

**Search the site:** go to [/search](/search).
```

#### `pages/00-intro/overview.mdx`

```mdx
---
title: Overview
description: The mental model for using Claude Code to speed up PM workflows.
toc: true
sidebar: true
---

import { Callout, Steps, Tabs, Tab } from 'nextra/components'

# Overview

<Callout type="info">
Keep raw notes, artifacts, and prompts close to your repo so Claude Code can reason over them.
</Callout>

## Core ideas
- Keep sources in your repo (notes, PRDs, screenshots)
- Build small, repeatable command files
- Iterate via diffs to keep changes reviewable

<Steps>
  <li>Open your project folder in Claude Code</li>
  <li>Run your first command (e.g., `/summarize-notes`)</li>
  <li>Commit outputs with a short rationale</li>
</Steps>

## Before / After
<Tabs items={['Before', 'After']}>
  <Tab>Raw meeting notes …</Tab>
  <Tab>Actionable summary with owners, dates, risks.</Tab>
</Tabs>
```

#### `pages/01-getting-started/install-claude-code.mdx`

```mdx
---
title: Install Claude Code
description: Install and open this repo to start running commands.
toc: true
sidebar: true
---

## 60-second quickstart
- Clone the site repo
- Install dependencies
- Start dev server
- Open http://localhost:3000 and browse via **sidebar** + **TOC**
```

#### `pages/99-reference/commands.mdx`

```mdx
---
title: Commands
description: Common Claude Code commands and when to use them.
toc: true
sidebar: true
---

### `/summarize-notes`
Use on raw meeting notes to produce a decision-ready brief.

### `/draft-prd`
Turns an outline + acceptance criteria into a structured PRD.
```

#### `pages/search.mdx` (Pagefind UI)

```mdx
---
title: Search
description: Full-text search across all docs (client-side via Pagefind).
toc: false
sidebar: true
---

# Search

<link rel="stylesheet" href="/pagefind/pagefind-ui.css" />
<div id="search"></div>
<script src="/pagefind/pagefind-ui.js"></script>
<script dangerouslySetInnerHTML={{__html: `
  window.addEventListener('DOMContentLoaded', () => {
    new PagefindUI({ element: '#search', showImages: false, baseUrl: '/' })
  })
`}} />
```

## Behavior Requirements

* **Sidebar** ordering and labels are derived from `_meta.json` files in each folder under `pages/`.
* **Right-side TOC** is enabled per page with `toc: true` frontmatter; headings (`##`, `###`) generate anchors automatically.
* **Static export** writes HTML to `/out`; **Pagefind** indexes `/out` and outputs assets to `/out/pagefind/*`. Those assets must be publicly served so `/search` can load them.
* Content authors can use plain `.md`; switch to `.mdx` only when interactive components are needed (`nextra/components`).

## Deployment Target

* Host as a static site (e.g., Vercel): serve the exported `/out` directory, including `/pagefind` assets. No server runtime is required.
